generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  name          String?
  image         String?
  password      String?
  role          String    @default("customer")
  phone         String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @updatedAt @map("updated_at")
  
  accounts Account[]
  sessions Session[]
  orders   Order[]
  
  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?
  token_type        String? @map("token_type")
  scope             String?
  id_token          String? @map("id_token")
  session_state     String? @map("session_state")
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  
  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Product {
  id                String   @id @default(cuid())
  name              String
  description       String?
  price             Float
  images            String
  tags              String
  inStock           Boolean? @default(true) @map("in_stock")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at")
  slug              String?  @unique
  shortDescription  String?  @map("short_description")
  sku               String?  @unique
  regularPrice      Float?   @map("regular_price")
  salePrice         Float?   @map("sale_price")
  featuredImage     String?  @map("featured_image")
  stockQuantity     Int?     @default(0) @map("stock_quantity")
  stockStatus       String?  @default("instock") @map("stock_status")
  manageStock       Boolean? @default(true) @map("manage_stock")
  lowStockThreshold Int?     @default(5) @map("low_stock_threshold")
  weight            Float?
  dimensions        String?
  status            String?  @default("published")
  featured          Boolean? @default(false)
  metaTitle         String?  @map("meta_title")
  metaDescription   String?  @map("meta_description")
  
  variants           ProductVariant[]
  attributes         ProductAttribute[]
  productCategories  ProductCategory[]
  orderItems         OrderItem[]
  
  @@map("products")
}

model ProductVariant {
  id            String   @id @default(cuid())
  productId     String   @map("product_id")
  name          String
  sku           String?  @unique
  price         Float
  regularPrice  Float?   @map("regular_price")
  salePrice     Float?   @map("sale_price")
  stockQuantity Int?     @default(0) @map("stock_quantity")
  stockStatus   String?  @default("instock") @map("stock_status")
  attributes    String?
  images        String
  weight        Float?
  dimensions    String?
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @default(now()) @updatedAt @map("updated_at")
  
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_variants")
}

model ProductAttribute {
  id        String  @id @default(cuid())
  productId String? @map("product_id")
  name      String
  value     String
  
  product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([productId, name, value])
  @@map("product_attributes")
}

model Category {
  id              String   @id @default(cuid())
  name            String
  slug            String   @unique
  description     String?
  image           String?
  parentId        String?  @map("parent_id")
  displayOrder    Int?     @map("display_order")
  isVisible       Boolean? @default(true) @map("is_visible")
  metaTitle       String?  @map("meta_title")
  metaDescription String?  @map("meta_description")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at")
  
  parent   Category?           @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[]          @relation("CategoryHierarchy")
  productCategories ProductCategory[]
  
  @@map("categories")
}

model ProductCategory {
  productId  String
  categoryId String
  
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  @@id([productId, categoryId])
  @@map("product_categories")
}

model Order {
  id                String   @id @default(cuid())
  orderNumber       String   @unique @map("order_number")
  userId            String?  @map("user_id")
  customerEmail     String   @map("customer_email")
  customerPhone     String?  @map("customer_phone")
  status            String?  @default("pending")
  paymentStatus     String?  @default("pending") @map("payment_status")
  paymentMethod     String?  @map("payment_method")
  subtotal          Float
  tax               Float?   @default(0)
  shipping          Float?   @default(0)
  discount          Float?   @default(0)
  total             Float
  currency          String   @default("INR")
  billingFirstName  String?  @map("billing_first_name")
  billingLastName   String?  @map("billing_last_name")
  billingCompany    String?  @map("billing_company")
  billingAddress1   String?  @map("billing_address1")
  billingAddress2   String?  @map("billing_address2")
  billingCity       String?  @map("billing_city")
  billingState      String?  @map("billing_state")
  billingPostcode   String?  @map("billing_postcode")
  billingCountry    String?  @map("billing_country")
  shippingFirstName String?  @map("shipping_first_name")
  shippingLastName  String?  @map("shipping_last_name")
  shippingCompany   String?  @map("shipping_company")
  shippingAddress1  String?  @map("shipping_address1")
  shippingAddress2  String?  @map("shipping_address2")
  shippingCity      String?  @map("shipping_city")
  shippingState     String?  @map("shipping_state")
  shippingPostcode  String?  @map("shipping_postcode")
  shippingCountry   String?  @map("shipping_country")
  notes             String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @default(now()) @updatedAt @map("updated_at")
  
  user       User?        @relation(fields: [userId], references: [id])
  orderItems OrderItem[]
  
  @@map("orders")
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String  @map("order_id")
  productId   String? @map("product_id")
  productName String  @map("product_name")
  quantity    Int
  price       Float
  unitPrice   Float?  @map("unit_price")
  
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product? @relation(fields: [productId], references: [id])
  
  @@map("order_items")
}

model Returns {
  id               String   @id @default(cuid())
  returnNumber     String   @unique @map("return_number")
  orderId          String   @map("order_id")
  customerEmail    String   @map("customer_email")
  customerPhone    String?  @map("customer_phone")
  returnReason     String   @map("return_reason")
  returnDescription String? @map("return_description")
  status           String   @default("pending")
  returnType       String   @default("refund") @map("return_type")
  refundAmount     Float    @map("refund_amount")
  images           String?
  videos           String?
  processedBy      String?  @map("processed_by")
  qcBy             String?  @map("qc_by")
  notes            String?
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @updatedAt @map("updated_at")
  
  order       Order       @relation(fields: [orderId], references: [id])
  returnItems ReturnItem[]
  
  @@map("returns")
}

model ReturnItem {
  id                String  @id @default(cuid())
  returnId          String  @map("return_id")
  orderItemId       String  @map("order_item_id")
  productId         String  @map("product_id")
  productName       String  @map("product_name")
  quantityReturned  Int     @map("quantity_returned")
  unitPrice         Float   @map("unit_price")
  totalRefundAmount Float   @map("total_refund_amount")
  restockable       Boolean @default(true)
  
  return Returns @relation(fields: [returnId], references: [id], onDelete: Cascade)
  
  @@map("return_items")
}

model ReturnStatusHistory {
  id        String   @id @default(cuid())
  returnId  String   @map("return_id")
  status    String
  notes     String?
  createdAt DateTime @default(now()) @map("created_at")
  
  @@map("return_status_history")
}

model ProductRecommendation {
  id                     String   @id @default(cuid())
  productId              String?  @map("product_id")
  recommendedProductId   String?  @map("recommended_product_id")
  score                  Float
  reason                 String?
  createdAt              DateTime @default(now()) @map("created_at")
  
  @@unique([productId, recommendedProductId])
  @@map("product_recommendations")
}

model EmailNotification {
  id        String    @id @default(cuid())
  userId    String?   @map("user_id")
  orderId   String?   @map("order_id")
  type      String
  subject   String
  content   String
  sent      Boolean?  @default(false)
  sentAt    DateTime? @map("sent_at")
  createdAt DateTime  @default(now()) @map("created_at")
  
  @@map("email_notifications")
}

model InventoryTransaction {
  id         String    @id @default(cuid())
  productId  String?   @map("product_id")
  type       String
  quantity   Int
  reason     String?
  reference  String?
  stockAfter Int       @map("stock_after")
  notes      String?
  createdBy  String?   @map("created_by")
  createdAt  DateTime  @default(now()) @map("created_at")
  
  @@map("inventory_transactions")
}

model Coupon {
  id          String    @id @default(cuid())
  code        String    @unique
  description String?
  type        String    @default("percentage")
  value       Float
  minimumAmount Float?  @map("minimum_amount")
  maximumDiscount Float? @map("maximum_discount")
  usageLimit  Int?      @map("usage_limit")
  usedCount   Int       @default(0) @map("used_count")
  startDate   DateTime? @map("start_date")
  endDate     DateTime? @map("end_date")
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at")
  
  @@map("coupons")
}

model Banner {
  id          String   @id @default(cuid())
  title       String
  description String?
  image       String
  link        String?
  position    String   @default("homepage")
  isActive    Boolean  @default(true) @map("is_active")
  startDate   DateTime? @map("start_date")
  endDate     DateTime? @map("end_date")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  
  @@map("banners")
}
